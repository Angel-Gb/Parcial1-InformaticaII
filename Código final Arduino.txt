void verificacion(int, int, int);
void imagen(int, int, int);
void patrones(int, int);
int *patron1();
int *patron2();
int *patron3();
int *patron4();
int binarioADecimal(int []);
int potencia(int, int);
void ledWrite(int []);
void encenderTodos();


//Declaración de variables
int datos = 4;
int almacenamiento = 5;		//paso de dato de salida a salida
int reloj = 6;
int arreglo[8] = {};
int *arreglito = nullptr;
int nulo[8]={0,0,0,0,0,0,0,0};







void setup(){
  pinMode(datos,OUTPUT);
  pinMode(almacenamiento,OUTPUT);
  pinMode(reloj,OUTPUT);
  Serial.begin(9600);
}



void loop(){				//Todo esto sería el publik, pero no es adecuado crear una función solo para repetir continuamente un mismo menú

	int opcion = 0;
	int tiempoEncendido = 0;
	int tiempoApagado = 0;
  	int reps = 0;
    	Serial.print("\n MENU: \n");
      	Serial.print("Para las siguientes opciones se debera ingresar el tiempo solicitado en una solicitud mas adelante.   \n");
      	Serial.print("1. Verificar funcionamiento LED.  \n");
      	Serial.print("2. Mostrar imagen deseada. \n");
      	Serial.print("3. Alternar patrones del 1 al 4. \n");
      	Serial.print("Seleccione una opcion: ");
      	while(Serial.available() == 0);
      	opcion = Serial.parseInt();
      	Serial.print(opcion);
      	switch(opcion){
        case 1:
        	Serial.print("\n Ingrese el tiempo (en ms) de duracion de los LED encendidos. \n");
        	while(Serial.available() == 0);
        	tiempoEncendido = Serial.parseInt();
        	Serial.print("Ingrese el tiempo (en ms) de duracion de los LED apagados. \n");
        	while(Serial.available() == 0);
        	tiempoApagado = Serial.parseInt();
        	Serial.print("Ingrese la cantidad de secuencias que desea ver. \n");
        	while(Serial.available() == 0);	
        	reps = Serial.parseInt();
        	verificacion(tiempoEncendido, tiempoApagado, reps);
        	break;
        case 2:
        	Serial.print("\n Ingrese el tiempo (en ms) de duracion de los LED encendidos. \n");
        	while(Serial.available() == 0);
        	tiempoEncendido = Serial.parseInt();
        	Serial.print("Ingrese el tiempo (en ms) de duracion de los LED apagados. \n");
        	while(Serial.available() == 0);
        	tiempoApagado = Serial.parseInt();
        	Serial.print("Ingrese la cantidad de secuencias que desea ver. \n");
        	while(Serial.available() == 0);	
        	reps = Serial.parseInt();
		imagen(tiempoEncendido, tiempoApagado, reps);
        	break;
        case 3:
        	Serial.print("\n Ingrese el tiempo (en ms) de duracion de los LED encendidos. \n");
        	while(Serial.available() == 0);
        	tiempoEncendido = Serial.parseInt();
        	Serial.print("Ingrese el tiempo (en ms) de duracion de los LED apagados. \n");
        	while(Serial.available() == 0);
        	tiempoApagado = Serial.parseInt();
		patrones(tiempoEncendido, tiempo2);

        	break;
        default:
      		Serial.print("\n Opcion invalida. \ n");
    		break;
      }
}



	






void imagen(int tiempoEncendido, int tiempoApagado, int reps){
  	int ingresado = 0;
 	Serial.print("\nA continuacion ingrese los valores de cada fila en formato entero \n") ;
  	for (int h = 0; h <8 ; h++){
      		ingresado = 256;
     	 	while ((ingresado >= 256)|| (ingresado < 0)){
      			Serial.print("\nFila #");
	      		Serial.print(h + 1);
	      		Serial.print(": ");
      			while(Serial.available() == 0);
		        ingresado = Serial.parseInt();
		        Serial.print(ingresado);
        		if ((ingresado >= 256)|| (ingresado < 0)){
	              		Serial.print("\nNumero invalido, asegurese que se encuentre en el intervalo [0,255]\n");
        		}
      		}
     	 arreglo[h] = ingresado;
  	}
	for (int i = 0; i< reps; i++ ){
		ledWrite(arreglo); delay(tiempoEncendido);
		ledWrite(nulo); delay(tiempoApagado);
	}
}



//Menú de patrones
void patrones(int tiempoEncendido, int tiempoApagado){
  
	arreglito = patron1();
	ledWrite(arreglito);delay(tiempoEncendido);
	delete arreglito;
	ledWrite(nulo); delay(tiempoApagado);


      	arreglito = patron2(); 
	ledWrite(arreglito);delay(tiempoEncendido);
	delete arreglito;
	ledWrite(nulo); delay(tiempoApagado);

      	arreglito = patron3();
	ledWrite(arreglito);delay(tiempoEncendido);
	delete arreglito;
	ledWrite(nulo);	delay(tiempoApagado);

      	arreglito = patron4();
	ledWrite(arreglito);delay(tiempoEncendido);
	delete arreglito;
	ledWrite(nulo); delay(tiempoApagado);


}
//Fin menú patrones


int *patron1(){
	int *patroncito= new int[8];
	int patron[8][8]={}; // Declaración de una matriz llamada "patron" de tamaño 8x8
    	int contador = 0;
   	// Generar el patrón específico
   	for (int fila = 0; fila < 4; fila++, contador++) {
      		for (int columna = 0; columna < 8; columna++) {
            	// Esta condición determina si el valor en la posición [i][j] debe ser 1 o 0
            	if ((columna>=(3-contador))&&(columna<=(4+contador))){
                	patron[fila][columna] = 1;
                	patron[7-fila][columna] = 1;
            	}
            	else{
                	patron[fila][columna] = 0;
                	patron[7-fila][columna] = 0;
            	}
        }
}
	for (int i = 0; i<8; i++){
		patroncito[i] = binarioADecimal(patron[i]);
	}
	return patroncito;
    }




int *patron2(){
  	int *patroncito= new int[8];
    	int patron2[8][8]={}; // Declaración de una matriz llamada "patron1" de 8x8
    	for (int i = 0; i < 8; i++) {
        	for (int j = 0; j < 8; j++) {
            	// Esta condición verifica si (i, j) está en una de las dos diagonales de la matriz.
            	// Si es así, establece el valor en (i, j) como 1, de lo contrario, lo establece como 0.
            	if ((i == j) || (i + j == 7)) {
                	patron2[i][j] = 1;
            	}
            	else {
                	patron2[i][j] = 0;
            	}
        	}
    	}
    	for (int i = 0; i<8; i++){
        	patroncito[i] = binarioADecimal(patron2[i]);
    	}
	return patroncito;
}

int *patron3(){
 	int *patroncito = new int[8];
    	// Definición de dos secuencias de números (secuencia1 y secuencia2)
    	int secuencia1[8] = {1, 1, 0, 1, 1, 0, 1, 1};
    	int secuencia2[8] = {0, 1, 1, 0, 1, 1, 0, 1};
    	int **matriz = new int *[8];
    	// Iteración a través de las filas
    	for (int i = 0; i < 8; i++) {
        	// Determina cuál secuencia se utilizará en esta fila basándose en el valor de i
        	// Se alterna entre secuencia1 y secuencia2 en grupos de 4 filas.
        	matriz[i] = (i % 4 < 2) ? secuencia1 : secuencia2;
    	}
    	for (int i = 0; i<8; i++){
        	patroncito[i] = binarioADecimal(matriz[i]);
    	}
    	delete[] matriz;
    	return patroncito;
}


int *patron4(){
	int *patroncito = new int[8];
	// Declaración de los arrays unidimensionales
    	int fila1[8]={};
    	int fila2[8]={};
    	int fila3[8]={};
	int fila4[8]={};
    	int prueba = 0;

    	// almacenamos estos arrays en un array de punteros.
    	int* filas[8] = {fila1, fila2, fila3, fila4, fila4, fila3, fila2, fila1};

    
    	// correr los valores para llenar con unos
    	for (int i = 0; i < 8; i++) {
        	if (i < 4 ) {
            		fila1[i] = 1;
            		fila2[i] = 0;
            	fila3[i] = 0;
            	fila4[i] = 0;
		}
		else{
            		fila1[i] = 0;
            		fila2[i-3] = 1;
            		fila3[i-2] = 1;
            		fila4[i-1] = 1;
        	}

    	}    
	for (int i = 0; i<8; i++){
        	patroncito[i]  = binarioADecimal(filas[i]);        	
    	}
	return patroncito;
}
  


  
  
int binarioADecimal(int arreglo[]){
    int total = 0;
    for (int i = 0; i <8; i++){
        if(arreglo[i]==1){
            total += potencia(2,7-i);
        }
    }
    return total;
}


int potencia(int num, int potencia){
    int potenciaTotal = 1;
    for (int j = 0; j < potencia ; j++){
        potenciaTotal *= num;
    }
    return potenciaTotal;
}



void verificacion(int tiempoEncendido, int tiempoApagado, int reps){
	for (int j = 0; j< reps; j++){
		encenderTodos(); delay(tiempoEncendido);
		ledWrite(nulo); delay(tiempoApagado);
	}
}

void encenderTodos(){
	for(int i=0; i<8; i++){
		arreglo[i] = 255;
	}
	ledWrite(arreglo);
}



void ledWrite(int *arreglo){
  	int i = 7;
	digitalWrite(almacenamiento, LOW);
   	shiftOut(datos, reloj, LSBFIRST,arreglo[i]);
  	shiftOut(datos, reloj, LSBFIRST,arreglo[i-1]);
  	shiftOut(datos, reloj, LSBFIRST,arreglo[i-2]);
  	shiftOut(datos, reloj, LSBFIRST,arreglo[i-3]);
  	shiftOut(datos, reloj, LSBFIRST,arreglo[i-4]);
  	shiftOut(datos, reloj, LSBFIRST,arreglo[i-5]);
  	shiftOut(datos, reloj, LSBFIRST,arreglo[i-6]);
  	shiftOut(datos, reloj, LSBFIRST,arreglo[i-7]);
  	digitalWrite(almacenamiento, HIGH);
   	
}
