// C++ code


// definición variables y pines
const int datos = 4;
const int almacenamiento = 5;  		//paso de dato de salida a salida
const int reloj = 6;
int j = 0;
int matriz[8] = {};
int fila[8] = {0,0,0,0,0,0,0,0};



//Prototipo funciones
void verificacion(int ,int , int);
void imagen();
void patrones();
void patron1();
void patron2();
void patron3();
void patron4();
void publik(int, int, int);
void encenderTodos(int);
void apagarTodos(int);


// setup
void setup(){
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  Serial.begin(9600);
}

//Loop
void loop(){
  	int opcionA = 0;
  	int tiempo1 = 0;
  	int tiempo2 = 0;
    int reps = 0;
  	Serial.print("\n MENU: \n");
	Serial.print("1. Probar funcionamiento de los LED (5 iteraciones de 1s de duracion)  \n");
  	Serial.print("2. Mostrar el patron que desee a continuacon...  \n");
	Serial.print("3. Seleccionar un patron predefinido (1-4). \n");
	Serial.print("4. Seleccion de comandos alternos... \n");
	Serial.print("Seleccione una opcion: ");
  	while(Serial.available() == 0);
  	opcionA = Serial.parseInt();
  	Serial.print(opcionA);
  switch(opcionA){
    case 1:
    	tiempo1 = 1000;
    	tiempo2 = 3000;
  		reps = 5;
    	verificacion(tiempo1,tiempo2, reps);
    	break;
    case 2:
    	imagen();
    	break;
    case 3:
    	patrones();
    	break;
   	case 4:
    	publik(tiempo1, tiempo2, reps);
    	break;
    default:
    	Serial.print("\n Opcion invalida. \ n");
    	break;
  
  }
  
  delay(1000);

}


//Cuerpo de funciones

void verificacion(int tiempo1, int tiempo2, int reps){
  for (int y = 0; y < reps; y++){
 	encenderTodos(tiempo1);
  	apagarTodos(tiempo2);
  }
}


void imagen(){
 	Serial.print("\nHola Mundo 2 \n") ;
}

//Meú de patrones
void patrones(){
  int opcionB = 0;
  while (opcionB !=5){
    Serial.print("\n MENU: \n");
      Serial.print("1. Patron 1.  \n");
      Serial.print("2. Patron 2. \n");
      Serial.print("3. Patron 3. \n");
      Serial.print("4. Patron 4. \n");
      Serial.print("5. Salir. \n");
      Serial.print("Seleccione una opcion: ");
      while(Serial.available() == 0);
      opcionB = Serial.parseInt();
    Serial.print(opcionB);
    switch(opcionB){
     case 1:
      	patron1();
      	break;
     case 2: 
      	patron2();
      	break;
     case 3:
      	patron3();
      	break;
     case 4:
      	patron4();
      	break;
     case 5:
      	break;
     default:
      	Serial.print("\n Opcion invalida. \ n");
    	break;
    }
  }
}
//Fin menú patrones


void patron1(){
  	Serial.print("\nHola Mundo 3 \n") ;
}

void patron2(){
  	Serial.print("\nHola Mundo 4 \n") ;
}

void patron3(){
 	Serial.print("\nHola Mundo 5 \n") ; 
}

void patron4(){
 	Serial.print("\nHola Mundo 6 \n") ; 
}
  
void publik(int tiempo1,int tiempo2, int reps){
  	int opcionC = 0;
  	while (opcionC !=4){
    Serial.print("\n MENU: \n");
      Serial.print("Para las siguientes opciones se debera ingresar el tiempo solicitado en una solicitud mas adelante.   \n");
      Serial.print("1. Verificar funcionamiento LED.  \n");
      Serial.print("2. Mostrar imagen deseada. \n");
      Serial.print("3. Alternar patrones del 1 al 4. \n");
      Serial.print("4. Salir. \n");
      Serial.print("Seleccione una opcion: ");
      while(Serial.available() == 0);
      opcionC = Serial.parseInt();
      Serial.print(opcionC);
      switch(opcionC){
        case 1:
        	Serial.print("\n Ingrese el tiempo (en ms) de duracion de los LED encendidos. \n");
        	while(Serial.available() == 0);
        	tiempo1 = Serial.parseInt();
        	Serial.print("Ingrese el tiempo (en ms) de duracion de los LED apagados. \n");
        	while(Serial.available() == 0);
        	tiempo2 = Serial.parseInt();
        	Serial.print("Ingrese la cantidad de secuencias que desea ver. \n");
        	while(Serial.available() == 0);	
        	reps = Serial.parseInt();
        	verificacion(tiempo1, tiempo2, reps);
        	break;
        case 2:
        	
        	break;
        case 3:
        
        	break;
        case 4:
        	break;
        default:
      		Serial.print("\n Opcion invalida. \ n");
    		break;
      }
    }
}
  
  




void encenderTodos(int tiempo1){
  for (int p = 0; p <8 ; p++){
    matriz[p] = 255;
  }
	digitalWrite(almacenamiento, LOW);
	shiftOut(datos, reloj, LSBFIRST, matriz[j]);
	shiftOut(datos, reloj, LSBFIRST, fila[0]);
	digitalWrite(almacenamiento, HIGH);
	delay(tiempo1);
}

void apagarTodos(int tiempo2){
  for (int p = 0; p <8 ; p++){
    matriz[p] = 0;
	}	
	digitalWrite(almacenamiento, LOW);
	shiftOut(datos, reloj, LSBFIRST, matriz[j]);
	shiftOut(datos, reloj, LSBFIRST, fila[0]);
	digitalWrite(almacenamiento, HIGH);
	delay(tiempo2);
}
